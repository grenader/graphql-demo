type Query {
    greeting: String
    hello: String
    artifactRepositories : [ArtifactRepository]
    artifactRepository(id : ID!) : ArtifactRepository
    project(slug: ID!): Project
    employees: [Employee]

    employee(id: ID!): Employee
    findEmployee(name: String!, salary: Float!):  Employee!
    findEmployeeFilter(filter: LinkFilter):  Employee!

    publisherById(id:Int): Publisher
    authorById(id:Int): Author
    bookById(id:Int): Book
}

type Publisher {
    id: ID!
    name: String!
    authors: [Author]
    books: [Book]
}

type Author {
    id: ID!
    name: String!
    publisher: Publisher!
    books: [Book]!
}


type Book {
    id: ID!
    title: String!
    ASIN: String!
    author: Author!
    publisher: Publisher!
}

input LinkFilter {
    name: String
    salary: Float
}

type ArtifactRepository {
    id: ID!
    name: String!
    url: String!
    snapshotsEnabled: Boolean
}

type Project {
    slug: ID!
    name: String!
    repositoryUrl: String!
    status: ProjectStatus!
    releases: [Release]
}

type Release {
    version: String!
    status: ReleaseStatus!
    current: Boolean
}

enum ProjectStatus {
    ACTIVE
    COMMUNITY
    INCUBATING
    ATTIC
}

enum ReleaseStatus {
    GENERAL_AVAILABILITY
    MILESTONE
    SNAPSHOT
}


type Employee {
    id: ID!
    name: String
    # restricted
    salary: String
}

input UpdateSalaryInput {
    employeeId: ID!
    newSalary: Int!
}
type UpdateSalaryPayload {
    success: Boolean!
    employee: Employee
}
